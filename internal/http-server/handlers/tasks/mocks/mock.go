// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Swiffy12/taskify/internal/http-server/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTaskService creates a new instance of MockTaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskService {
	mock := &MockTaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskService is an autogenerated mock type for the TaskService type
type MockTaskService struct {
	mock.Mock
}

type MockTaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskService) EXPECT() *MockTaskService_Expecter {
	return &MockTaskService_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function for the type MockTaskService
func (_mock *MockTaskService) CreateTask(title string, description string) (int, error) {
	ret := _mock.Called(title, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return returnFunc(title, description)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = returnFunc(title, description)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(title, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockTaskService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - title string
//   - description string
func (_e *MockTaskService_Expecter) CreateTask(title interface{}, description interface{}) *MockTaskService_CreateTask_Call {
	return &MockTaskService_CreateTask_Call{Call: _e.mock.On("CreateTask", title, description)}
}

func (_c *MockTaskService_CreateTask_Call) Run(run func(title string, description string)) *MockTaskService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTaskService_CreateTask_Call) Return(n int, err error) *MockTaskService_CreateTask_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTaskService_CreateTask_Call) RunAndReturn(run func(title string, description string) (int, error)) *MockTaskService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type MockTaskService
func (_mock *MockTaskService) DeleteTask(id int) (int, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (int, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) int); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockTaskService_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - id int
func (_e *MockTaskService_Expecter) DeleteTask(id interface{}) *MockTaskService_DeleteTask_Call {
	return &MockTaskService_DeleteTask_Call{Call: _e.mock.On("DeleteTask", id)}
}

func (_c *MockTaskService_DeleteTask_Call) Run(run func(id int)) *MockTaskService_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaskService_DeleteTask_Call) Return(n int, err error) *MockTaskService_DeleteTask_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTaskService_DeleteTask_Call) RunAndReturn(run func(id int) (int, error)) *MockTaskService_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTasks provides a mock function for the type MockTaskService
func (_mock *MockTaskService) GetAllTasks(title string) ([]models.Task, error) {
	ret := _mock.Called(title)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]models.Task, error)); ok {
		return returnFunc(title)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []models.Task); ok {
		r0 = returnFunc(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(title)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_GetAllTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTasks'
type MockTaskService_GetAllTasks_Call struct {
	*mock.Call
}

// GetAllTasks is a helper method to define mock.On call
//   - title string
func (_e *MockTaskService_Expecter) GetAllTasks(title interface{}) *MockTaskService_GetAllTasks_Call {
	return &MockTaskService_GetAllTasks_Call{Call: _e.mock.On("GetAllTasks", title)}
}

func (_c *MockTaskService_GetAllTasks_Call) Run(run func(title string)) *MockTaskService_GetAllTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaskService_GetAllTasks_Call) Return(tasks []models.Task, err error) *MockTaskService_GetAllTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskService_GetAllTasks_Call) RunAndReturn(run func(title string) ([]models.Task, error)) *MockTaskService_GetAllTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type MockTaskService
func (_mock *MockTaskService) GetTask(id int) (models.Task, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (models.Task, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) models.Task); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockTaskService_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - id int
func (_e *MockTaskService_Expecter) GetTask(id interface{}) *MockTaskService_GetTask_Call {
	return &MockTaskService_GetTask_Call{Call: _e.mock.On("GetTask", id)}
}

func (_c *MockTaskService_GetTask_Call) Run(run func(id int)) *MockTaskService_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaskService_GetTask_Call) Return(task models.Task, err error) *MockTaskService_GetTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskService_GetTask_Call) RunAndReturn(run func(id int) (models.Task, error)) *MockTaskService_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type MockTaskService
func (_mock *MockTaskService) UpdateTask(id int, req models.UpdateTaskRequest) (models.Task, error) {
	ret := _mock.Called(id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, models.UpdateTaskRequest) (models.Task, error)); ok {
		return returnFunc(id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(int, models.UpdateTaskRequest) models.Task); ok {
		r0 = returnFunc(id, req)
	} else {
		r0 = ret.Get(0).(models.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(int, models.UpdateTaskRequest) error); ok {
		r1 = returnFunc(id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskService_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockTaskService_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - id int
//   - req models.UpdateTaskRequest
func (_e *MockTaskService_Expecter) UpdateTask(id interface{}, req interface{}) *MockTaskService_UpdateTask_Call {
	return &MockTaskService_UpdateTask_Call{Call: _e.mock.On("UpdateTask", id, req)}
}

func (_c *MockTaskService_UpdateTask_Call) Run(run func(id int, req models.UpdateTaskRequest)) *MockTaskService_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 models.UpdateTaskRequest
		if args[1] != nil {
			arg1 = args[1].(models.UpdateTaskRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTaskService_UpdateTask_Call) Return(task models.Task, err error) *MockTaskService_UpdateTask_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskService_UpdateTask_Call) RunAndReturn(run func(id int, req models.UpdateTaskRequest) (models.Task, error)) *MockTaskService_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}
